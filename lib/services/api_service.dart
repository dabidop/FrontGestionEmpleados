import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:gestion_empleados/services/secure_storage_service.dart';

class ApiService {
  static const String baseUrl = "http://localhost:5219/api/auth";

  // ‚úÖ M√©todo para iniciar sesi√≥n o solicitar registro
    static Future<Map<String, dynamic>> login(String email, String password) async {
    final response = await http.post(
      Uri.parse('$baseUrl/login'),
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({"Email": email, "Contrasena": password}),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);

      if (data.containsKey('usuario') && data.containsKey('token')) {
        // ‚úÖ Usuario ya registrado, iniciar sesi√≥n
        String token = data['token'];
        await SecureStorageService.storeToken(token);
        SharedPreferences prefs = await SharedPreferences.getInstance();
        await prefs.setString('codigo_empleado', data['usuario']['codigo_empleado']);
        await prefs.setString('email', data['usuario']['email']);

        // üî• Imprimir el token para verificar
        print("üî• Token almacenado: $token");

        return {"success": true, "isRegistered": true};
      } else {
        // ‚ö†Ô∏è Usuario no registrado, se envi√≥ un c√≥digo de verificaci√≥n
        return {"success": true, "isRegistered": false, "email": data['email']};
      }
    } else {
      return {"success": false, "message": "Credenciales incorrectas"};
    }
  }


  // ‚úÖ M√©todo para confirmar el c√≥digo de verificaci√≥n y registrar al usuario (NO TOCADO)
  static Future<bool> confirmarRegistro(String email, String codigoVerificacion, String password) async {
    final response = await http.post(
      Uri.parse('$baseUrl/confirmar-registro'),
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({
        "Email": email,
        "CodigoVerificacion": codigoVerificacion,
        "Contrasena": password
      }),
    );

    return response.statusCode == 200;
  }

  // ‚úÖ M√©todo para cerrar sesi√≥n (NO TOCADO)
  static Future<void> logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.remove('codigo_empleado');
    await prefs.remove('email');
  }

    // ‚úÖ M√©todo para obtener el perfil del usuario autenticado
    static Future<Map<String, dynamic>> getPerfil() async {
    String? token = await SecureStorageService.getToken();
    print("üî• Token le√≠do: $token"); // ‚úÖ Imprimir el token le√≠do

    if (token == null) {
      return {"success": false, "message": "No hay token de autenticaci√≥n."};
    }

    final response = await http.get(
      Uri.parse('http://localhost:5219/api/usuarios/perfil'),
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token"
      },
    );

    if (response.statusCode == 200) {
      final jsonData = jsonDecode(response.body);
      return jsonData;
    } else {
      return {"success": false, "message": "Error al obtener el perfil."};
    }
  }


}
